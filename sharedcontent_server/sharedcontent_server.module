<?php

/**
 * @file
 * Hooks for the shared content server module.
 */

/**
 * Implements hook_menu().
 *
 * @see sharedcontent_server_configure_keyword_vocabularies()
 * @see sharedcontent_server_configure_variables()
 */
function sharedcontent_server_menu() {
  $items = array();

  $items['admin/config/services/sharedcontent/settings/keywords'] = array(
    'title' => 'Keyword vocabularies',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure the taxonomy vocabularies to be taken into account when building the keywords while indexing a local content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_server_configure_keyword_vocabularies'),
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent_server.admin.inc',
  );

  $items['admin/config/services/sharedcontent/settings/server'] = array(
    'title' => 'Server',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Various server settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_server_configure_variables'),
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent_server.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_custom_theme().
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_custom_theme() {
  // Allow the user to request a particular theme via a query parameter.
  if (sharedcontent_is_overlay_request()) {
    return variable_get('sharedcontent_overlay_theme', 'seven');
  }
}

/**
 * Implements hook_init().
 *
 * $todo IMPORTANT: Do the actual changing on the client side for caching reasons.
 * @todo explain why we switch links.
 * @todo Probably we want to open external links in a new tab/window.
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_init() {
  if (sharedcontent_is_overlay_request()) {
    drupal_add_js(drupal_get_path('module', 'sharedcontent_server') . '/sharedcontent_server.js');
  }
}

/**
 * Implements hook_contextual_links_view_alter()
 *
 * Hide the contextual links in overlay mode.
 */
function sharedcontent_server_contextual_links_view_alter(&$element, &$items) {
  if (sharedcontent_is_overlay_request()) {
    // we expect to be in an none cache situation.
    $element['#links'] = array();
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Remove comments and links in on overlay display.
 */
function sharedcontent_server_node_view_alter(&$build) {
  if (sharedcontent_is_overlay_request()) {
    if (variable_get('sharedcontent_overlay_no_comments', TRUE)) {
      unset($build['comments']);
    }
    if (variable_get('sharedcontent_overlay_no_links', TRUE)) {
      unset($build['links']);
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * Remove the local task in overlay mode.
 */
function sharedcontent_server_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (sharedcontent_is_overlay_request()) {
    $data['tabs'] = array('count' => 0, 'output' => array());
    $data['actions'] = array('count' => 0, 'output' => array());
  }
}

/**
 * Implements hook_page_alter().
 *
 * Remove toolbar on overlay display.
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_page_alter(&$page) {
  if (sharedcontent_is_overlay_request() && variable_get('sharedcontent_overlay_no_toolbar', TRUE)) {
    unset($page['page_top']['toolbar']);
    if (module_exists('admin_menu')) {
      admin_menu_suppress();
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add sharedcontent view modes to every entity.
 *
 * * sharedcontent_teaser
 * * sharedcontent_inline
 */
function sharedcontent_server_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $key => $info) {
    $entity_info[$key]['view modes']['sharedcontent_teaser'] = array(
      'label' => t('Shared Teaser'),
      'custom settings' => TRUE,
    );
    $entity_info[$key]['view modes']['sharedcontent_inline'] = array(
      'label' => t('Shared Display'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_services_resources().
 *
 * Define a resource to expose rendered content for displaying on sc clients.
 *
 * @see sharedcontent_server_render_content()
 */
function sharedcontent_server_services_resources() {
  // @todo HIGH rename to sharedcontent_content
  $resource['sharedcontent'] = array(
    'retrieve' => array(
      'callback' => 'sharedcontent_server_render_content',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        'uuid' => array(
          'name' => 'uuid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The uuid of the shared content to get',
        ),
        'view_mode' => array(
          'name' => 'view_mode',
          'optional' => TRUE,
          'source' => array('param' => 'mode'),
          'default value' => 'sharedcontent_teaser',
          'type' => 'string',
          'description' => 'The view mode to be used for rendering',
        ),
        'langcode' => array(
          'name' => 'langcode',
          'optional' => TRUE,
          'source' => array('param' => 'lang'),
          'type' => 'string',
          'description' => 'The language to be used for rendering',
        ),
      ),
    ),
  );
  // @todo HIGH rename to sharedcontent_assignments
  $resource['assignments'] = array(
    'retrieve' => array(
      'callback' => 'sharedcontent_server_resource_assignment',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        'uuid' => array(
          'name' => 'uuid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The uuid of the assignment to get',
        ),
      ),
    ),
    'update' => array(
      'callback' => 'sharedcontent_server_resource_assignment',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        'uuid' => array(
          'name' => 'uuid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The uuid of the assignment to get',
        ),
        array(
          'name' => 'assignment',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'The assignment data to update',
          'type' => 'array',
        ),
      ),
    ),
  );
  // @todo HIGH rename to sharedcontent_index
  $resource['index'] = array(
    'retrieve' => array(
      'callback' => 'sharedcontent_server_resource_index',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        'uuid' => array(
          'name' => 'uuid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The uuid of the index to get',
        ),
      ),
    ),
    'update' => array(
      'callback' => 'sharedcontent_server_resource_index',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        'uuid' => array(
          'name' => 'uuid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The uuid of the index to get',
        ),
        array(
          'name' => 'assignment',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'The index data to update',
          'type' => 'array',
        ),
      ),
    ),
  );
  // @todo HIGH rename to sharedcontent_entity_labels
  $resource['entity_labels'] = array(
    'retrieve' => array(
      'callback' => 'sharedcontent_server_get_local_entity_bundle_labels',
      'access callback' => 'sharedcontent_access',
      'args' => array(
        // @todo do we really expose this argument?
        'entity_type' => array(
          'name' => 'Entity',
          'optional' => TRUE,
          'source' => array('path' => 0),
          'type' => 'string',
          'description' => 'The type of the entity.',
        ),
      ),
    ),
  );
  return $resource;
}

/**
 * Render content and deliver for remote inclusion.
 */
function sharedcontent_server_render_content($uuid, $view_mode = 'sharedcontent_teaser', $langcode = NULL) {
  $index = sharedcontent_index_load_by_uuid($uuid);
  $entity = sharedcontent_render_content($index, $view_mode, $langcode);

  // now handle forwarding of js / css
  global $base_url;
  $instances = drupal_static(__FUNCTION__);

  $output['content'] = drupal_render($entity);
  $output['base_url'] = $base_url;
  $output['js'] = array();
  $output['inline_js'] = array();
  $output['css'] = array();
  $output['settings'] = array();

  // apply sharedcontent richmedia support
  ctools_include('plugins');
  foreach (ctools_get_plugins('sharedcontent', 'richmedia') as $richmedia) {
    $class = ctools_plugin_get_class($richmedia, 'handler');
    if (!class_exists($class)) {
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Missing Richmedia plugin class', array('richmedia' => $richmedia));
      continue;
    }
    if (!isset($instances[$class])) {
      $instances[$class] = new $class();

      // Check that plugin class has inherited proper 'example_operation' class.
      // @todo inheritance from "example" is wrong. Find better naming?
      if (!is_subclass_of($instances[$class], 'SharedContentRichMedia')) {
        unset($instances[$class]);
        continue;
      }
    }

    $output['js'] = array_merge($output['js'], $instances[$class]->getJsFiles($index, $view_mode, $langcode));
    $output['inline_js'] = array_merge($output['inline_js'], $instances[$class]->getInlineJs($index, $view_mode, $langcode));
    $output['settings'] = array_merge($output['settings'], $instances[$class]->getJsSettings($index, $view_mode, $langcode));
    $output['css'] = array_merge($output['css'], $instances[$class]->getCssFiles($index, $view_mode, $langcode));
  }
  sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Deliver content.', array('output' => $output), array('severity' => WATCHDOG_DEBUG));

  return $output;
}

/**
 * Implements hook_services_resources_alter().
 *
 * Attach a count action to all views service displays.
 */
function sharedcontent_server_services_resources_alter(&$resources, $endpoint) {
  foreach ($resources as &$resource) {
    if (isset($resource['operations']['index']['view info'])) {
      $index = $resource['operations']['index'];
      $resource['actions']['count'] = array(
        'help' => t('Returns the entry count of the view.'),
        'callback' => 'sharedcontent_server_resource_action_count',
        'access callback' => isset($index['access callback']) ? $index['access callback'] : TRUE,
        'access arguments' => isset($index['access arguments']) ? $index['access arguments'] : NULL,
        'args' => array(
          'view_name' => array(
            'name' => 'view_name',
            'type' => 'string',
            'description' => 'The name of the view to get.',
            'source' => FALSE,
            'optional' => TRUE,
            'default value' => $index['view info']['view_name'],
          ),
          'display_id' => array(
            'name' => 'display_id',
            'type' => 'string',
            'description' => 'The display ID of the view to get.',
            'source' => array('param' => 'display_id'),
            'optional' => TRUE,
            'default value' => $index['view info']['display_id'],
          ),
          'args' => array(
            'name' => 'args',
            'type' => 'array',
            'description' => 'A list of arguments to pass to the view.',
            'source' => array('param' => 'args'),
            'optional' => TRUE,
            'default value' => array(),
          ),
          'filters' => array(
            'name' => 'filters',
            'type' => 'array',
            'description' => 'A list of filters to pass to the view. These are defined by the exposed filters on your view. Example call: <code>/views/your_view?filters[nid]=12345</code>',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      );
    }
  }
}

/**
 * Count the items a view contains.
 *
 * @param $view_name
 *   Name of the view.
 * @param $display_id
 *   Id ot the views display.
 * @param $args
 *   Array of context arguments.
 * @param  $filters
 *   Array of filter values.
 * @return type
 *   Count of records found by the view.
 */
function sharedcontent_server_resource_action_count($view_name, $display_id, $args = array(), $filters = array()) {
  $view = views_get_view($view_name);
  // Put all arguments and filters and then execute.
  $view->set_arguments($args, FALSE);
  $view->set_exposed_input($filters);
  $view->set_display($display_id);
  $view->execute();
  $count = $view->total_rows;

  $arguments = array(
    'view' => $view_name,
    'dispay' => $display_id,
    'args' => $args,
    'filters' => $filters,
    'count' => $count,
  );
  sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Index count.', $arguments, array('severity' => WATCHDOG_DEBUG));

  return $count;
}

/**
 * Update and view index in service.
 *
 * Callback function for retrieve and update an index in services.
 *
 * If a record already exists, a limited set of attributes will be
 * accepted and updated.
 *
 * If a new record will be created, it will become a shadow record
 * for we assume that this record is not exposed by a server. If this
 * will be the case the same record will be received by the
 * synchronization process which will make this record a remote record.
 *
 * @param $uuid
 *   Uuid of the index.
 * @param $values
 *   Array of values to update the index. If this is blank the index gets just
 *   displayed as is.
 * @return
 *   Index entity object if present, NULL otherwise.
 */
function sharedcontent_server_resource_index($uuid, array $values = NULL) {
  sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Load index record.', array('uuid' => $uuid), array('severity' => WATCHDOG_DEBUG));

  $index = sharedcontent_index_load_by_uuid($uuid);

  // Variable to determine if we need to save the record.
  $updated = FALSE;

  $arguments = array(
    'uuid' => $uuid,
  );
  if ($index && is_array($values)) {
    // We do have an existing record.
    $updated = $index->merge($values);
    $arguments['index'] = $index;
    sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Existing record.', $arguments, array('severity' => WATCHDOG_DEBUG));
  }
  // We need to create a new record. We can not assume that the node
  // updating this record is available as a server. So we make this
  // record a shadow record and mark it as unreachable.
  else {
    if (!empty($values)) {
      $values['origin'] = SHAREDCONTENT_INDEX_BUNDLE_SHADOW;
      $values['status'] = SHAREDCONTENT_INDEX_STATUS_UNREACHABLE;
      $values['connection_name'] = NULL;

      $index = entity_create('sharedcontent_index', $values);
      $updated = TRUE;
      $arguments['index'] = $index;
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'New record.', $arguments, array('severity' => WATCHDOG_DEBUG));
    }
    // We do not have a record stored nor will one be created.
    else {
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Ignore record.', $arguments, array('severity' => WATCHDOG_ERROR));
      return NULL;
    }
  }

  if ($updated) {
    $index->save();
  }

  return $index->getExposedAttributes();
}

/**
 * Update and view assignments in service.
 *
 * Callback function for retrieve and update an assignment in services.
 *
 * @param $uuid
 *   Uuid of the assignment
 * @param $values
 *   Array of values to update the assignment. If this is blank the assignment
 *   gets just displayed as is.
 * @return
 *   Assignment entity object if present, NULL otherwise.
 */
function sharedcontent_server_resource_assignment($uuid, $values = NULL) {
  $arguments = array(
    'uuid' => $uuid,
  );
  $assignment = sharedcontent_assignment_load_by_uuid($uuid);
  $updated = FALSE;

  if ($assignment) {
    $accepted = array(
      'uuid',
      'source',
      'target',
      'status',
      'created',
    );
    foreach ($accepted as $property) {
      if (isset($values[$property]) && $assignment->$property != $values[$property]) {
        $assignment->$property = $values[$property];
        $updated = TRUE;
      }
    }
    $arguments['assignment'] = $assignment;
    sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Existing assignment.', $arguments, array('severity' => WATCHDOG_DEBUG));
  }
  else {
    if (!empty($values)) {
      $values['origin'] = SHAREDCONTENT_INDEX_BUNDLE_SHADOW;
      $assignment = entity_create('sharedcontent_assignment', $values);
      $updated = TRUE;
      $arguments['assignment'] = $assignment;
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'New shadow assignment.', $arguments, array('severity' => WATCHDOG_DEBUG));
    }
  }

  if ($updated) {
    $source = sharedcontent_index_load_by_uuid($assignment->source);
    $target = sharedcontent_index_load_by_uuid($assignment->target);
    if ($assignment->status == 0) {
      rules_invoke_event('sharedcontent_assignment_client_link', $assignment, $source, $target);
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Assignment link.', $arguments, array('severity' => WATCHDOG_DEBUG));
    }
    else {
      if ($assignment->status == 1) {
        rules_invoke_event('sharedcontent_assignment_client_unlink', $assignment, $source, $target);
        sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Assignment unlink.', $arguments, array('severity' => WATCHDOG_DEBUG));
      }
    }
    $assignment->save();
  }

  return array(
    'uuid' => $assignment->uuid,
    'source' => $assignment->source,
    'target' => $assignment->target,
    'status' => $assignment->status,
    'url' => $assignment->url,
    'created' => $assignment->created,
    'changed' => $assignment->changed,
  );
}

/**
 * Implements hook_sharedcontent_richmedia().
 */
function sharedcontent_sharedcontent_richmedia() {
  if (module_exists('jplayer')) {
    $plugins['jplayer'] = array(
      'label' => t('jPlayer'),
      'handler' => array(
        'class' => 'SharedContentRichMediaJPlayer',
      ),
    );
  }

  if (module_exists('audiofield')) {
    $plugins['audiofield'] = array(
      'label' => t('Audio Field'),
      'handler' => array(
        'class' => 'SharedContentRichMediaAudioField',
      ),
    );
  }

  if (module_exists('jw_player')) {
    $plugins['jw_player'] = array(
      'label' => t('JW Player'),
      'handler' => array(
        'class' => 'SharedContentRichMediaJwPlayer',
      ),
    );
  }

  drupal_alter('sharedcontent_richmedia', $plugins);

  return $plugins;
}

/**
 * Implements hook_file_url_alter().
 *
 * @todo: Use the same callback mechanism as for the CSS and JS.
 */
function sharedcontent_server_file_url_alter(&$uri) {
  // @todo HIGH get rid of plugin specific code here.
  $path = '/' . variable_get('audiofield_players_dir', 'sites/all/libraries/player') . '/jplayer';
  if (!empty($uri) && strpos($path, $uri) !== FALSE) {
    global $base_url;
    $uri = $base_url . $uri;
  }
}

/**
 * Services Callback: Get local entity bundle labels.
 *
 * @param $entity_type
 *   String of entity_type
 * @return
 *   Array with bundles as key and labels as value.
 *
 * @todo HIGH note that if $entity_type is not provided, we only provide node labels.
 */
function sharedcontent_server_get_local_entity_bundle_labels($entity_type = 'node') {
  return sharedcontent_get_local_entity_bundle_labels($entity_type);
}

/**
 * Implements hook_field_access().
 *
 * Prevents access to field unless user has administer shared content permission.
 */
function sharedcontent_server_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_sharedcontent_reason' && $op == 'edit') {
    return user_access('administer sharedcontent', $account);
  }
  return TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function sharedcontent_server_views_pre_view($view, $display_id, $args) {
  if ($view->name == 'sharedcontent_service') {
    // @todo: The editing flag is set to prevent translation of the labels. Find
    //   a better way.
    $view->editing = TRUE;

    // This somehow does not work.
    // $view->localization_plugin = views_get_plugin('localization', 'none');
  }
}
