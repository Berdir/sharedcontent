<?php

/**
 * @file
 * Contains tests for Shared Content Client.
 */

class SharedcontentClientTestCase extends SharedcontentBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'Client tests',
      'description' => 'Test for client fatures',
      'group' => 'Shared Content',
    );
  }

  /**
   * Overrides DrupalWebTestCase::setUp()
   */
  function setUp() {
    // Given a Drupal installation with installed sharedcontent server
    $dependencies = array(
      'sharedcontent_client',
      'sharedcontent_server_feature',
      'sharedcontent_template_server_rules',
      'taxonomy',
    );
    $permissions = array();
    $permissions['editor'] = array(
      'administer nodes',
    );
    $permissions['admin'] = array(
      'administer sharedcontent'
    );
    $permissions['client'] = array(
      'access endpoint restricted',
    );
    parent::setUp($dependencies, $permissions);
  }

  /**
   * Test the synchronization of index records.
   */
  function testIndexSynchronisationt() {
    // Given a connection
    $this->createConnection('test');

    // When I synchronize the index
    $success = sharedcontent_client_index_synchronize(services_client_connection_load('test'));
    // @todo report failure

    // Then I should have seven index records in the sc index
    $index = entity_load('sharedcontent_index');
    $this->assertEqual(7, count($index));

    $record = array_shift($index);
    $this->assertEqual('3558f5cc-1aa7-47e9-8a31-49a0e85f9515', $record->uuid);
    $this->assertEqual('2', $record->entity_id);
    $this->assertEqual('node', $record->entity_type);
    $this->assertEqual('article', $record->entity_bundle);
    $this->assertEqual('Curabitur non turpis sem', $record->title);
    $this->assertEqual('Curabitur non turpis sem Foo', $record->keywords);
    $this->assertEqual('1', $record->status);
    $this->assertEqual('http://sc/node/2', $record->url);
    $this->assertEqual(1341836634, $record->entity_created);
    $this->assertEqual(1341845695, $record->entity_changed);
    $this->assertEqual(REQUEST_TIME, $record->created);
    $this->assertEqual(REQUEST_TIME, $record->changed);
  }

  /**
   * Test add and remove index record API calls.
   *
   * Creates an indexable content, assign to a local content, remove it from the
   * same content.
   */
  function testAPIAssignAndRemoveIndexRecordMethod() {
    // Given a local content type
    $this->drupalCreateContentType(array('type' => 'test_local_content_type'));
    // And an indexable content type
    $this->drupalCreateContentType(array('type' => 'test_index_content_type'));
    variable_set('sharedcontent_indexed_entities', array('node' => array('test_index_content_type' => 1)));

    // Add shared content field.
    module_load_include('admin.inc', 'sharedcontent_client', 'includes/sharedcontent_client');
    $field_name = sharedcontent_client_get_default_shared_content_field_name();
    sharedcontent_client_attach_shared_content_field($field_name, 'node', 'test_local_content_type');

    // Create local content.
    $local_content = $this->drupalCreateNode(array('type' => 'test_local_content_type'));
    $this->assertTrue(isset($local_content->nid), 'Local content exist.');

    // Make index content.
    $index_record_original = $this->drupalCreateNode(array('type' => 'test_index_content_type'));
    $this->assertTrue(isset($index_record_original->nid), 'Index record original exist.');

    // Get index record.
    $index = sharedcontent_index_load_by_entity_id(entity_id('node', $index_record_original), 'node', $index_record_original->language);
    $this->assertTrue(isset($index), 'Index is created.');
    $this->assertTrue(isset($index->id), 'Index is saved.');

    // Assign index to local.
    $assign_result = sharedcontent_client_assign_index_to_local_content($index->id, $local_content->nid, 'node', $field_name);
    $this->assertTrue($assign_result, 'Index assignment has gone well.');
    $local_content = node_load($local_content->nid);
    $this->assertEqual(count($local_content->{$field_name}[LANGUAGE_NONE]), 1, 'There is one indexed content.');

    // Remove index.
    $remove_result = sharedcontent_client_remove_index_from_local_content($index->id, $local_content->nid, 'node', $field_name);
    $this->assertTrue($remove_result, 'Index removal has finished well.');
    $local_content = node_load($local_content->nid);
    $this->assertEqual(count($local_content->{$field_name}), 0, 'There is no indexed content.');
  }

  /**
   * @todo doc
   */
  function testLinkablesAdministration() {
    // When I login as admin
    $this->loginAsAdmin();

    // And I visit the linkables admin form
    $this->drupalGet('admin/config/services/sharedcontent/settings/linkables');

    // And I select "Article" and  "Basic page"
    $edit = array(
      'node[bundles][article]' => TRUE,
      'node[bundles][page]' => TRUE,
    );
    $this->drupalPost('admin/config/services/sharedcontent/settings/linkables', $edit, t('Update linkable entities'));

    // And I confirm
    $this->drupalPost(NULL, array(), t('Confirm'));


    // Then the article should have a sharedcontent reference field
    _field_info_collate_fields(TRUE); // Clear chached field information.
    $field_name = sharedcontent_client_get_default_shared_content_field_name();

    $instance = field_info_instance('node', $field_name, 'article');
    $this->assertTrue($instance, 'Article has a sharedcontent reference field.');

    // And the page should have a sharedcontent reference field
    $instance = field_info_instance('node', $field_name, 'page');
    $this->assertTrue($instance, 'Page has a sharedcontent reference field.');
  }

}
